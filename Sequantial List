#include <iostream>
#include <stdlib.h>
//#include <string>
using namespace std;
// sequential list
template<class T>
class SeqList
{
private:
    int maxSize; //可容纳最大项数
    int curLen; //当前项数
    T *Data; //存放数据
    void AddSize(int addSize);
public:
    SeqList(int sz=3);//constructor
    SeqList(SeqList<T> &L);//copy constructor
    ~SeqList(){delete[]Data;}//destructor
    int ListSize(){return maxSize;}//返回某表最大项数
    int ListLen(){return curLen;}//返回某表当前项数（长度）
    bool GetData(int i,T&x);//获取某个元素
    bool Insert(int i,T&x);
    bool Remove(int i,T&x);
    int Search(T&x); //寻找表中与x相同的项并返回其序号
    int Locate(int i);//定位表中第i个表项的位置，返回其位置的序号
    bool IsEmpty(){return (curLen==0)?true:false;}
    bool IsFull(){return (curLen==maxSize)?true:false;}
    void Input();//从标准输入获取数据
    void Output();//输出到屏幕上
//    SeqList<T>& operator=(SeqList<T> &L);//表整体赋值
    //???重载输出函数怎么写？
};
//constructor
SeqList<T>::SeqList(int sz)
{
    maxSize = sz;
    curLen = 0;
    Data = new T[maxSize];
    if(Data == NULL)
    {
        cerr<<"存储分配错误！"<<endl;
        exit(1);
    }
}
//copy constructor
SeqList<T>::SeqList(SeqList<T> &L)
{
    maxSize = L.ListSize();
    curLen = L.ListLen();
    T value;
    Data = new T[maxSize];
    if(Data == NULL)
    {
        cerr<<"存储分配错误！"<<endl;
        exit(1);
    }
    for(int i=0;i<curLen;i++)
    {
        L.GetData(i,value);
        Data[i]=value;
    }
}
//增加表项数
void SeqList<T>::AddSize(int addSize)
{
    int newSize;
    int num=curLen;
    if(addSize<=0)
    {
        cerr<<"无效的数组大小！"<<endl;
        return;
    }
    newSize = addSize + maxSize;
    T *newArray = new T[newSize];
    if(newArray == NULL)
    {
        cerr<<"存储分配错误！"<<endl;
        exit(1);
    }
    T *srcptr = Data;//源数组首地址source
    T *destptr = newData; //目的数组首地址destination
    while(num)
        *destptr++ = *srcptr++;//while num>0;*destptr=*srcptr;*destptr++;*srcptr++;
    delete[]Data; //????
    Data = newData;
    maxSize = newSize;
}
//获取第i个元素
bool SeqList<T>::GetData(int i,T&x)
{
    if(i<=0||i>curLen)
        return false;
    x=Data[i-1];
    return true;
}
//插入到第i个元素之前，变成新的第i个元素
bool SeqList<T>::Insert(int i,T&x)
{
    if(curLen == maxSize)
        return false;
    if(i<1 || i>curLen)
        return false;
    for(int j=curLen-1;j>=i-1;j--)
        Data[j+1]=Data[j];
    Data[i-1]=x;
    curLen+=1;
    return true;
}
//移除第i个元素
bool SeqList<T>::Remove(int i,T&x)
{
    if(curLen==0)
        return false;
    if(i<1||i>curLen)
        return false;
    for(int j=i-1;j<curLen-1;j++)
        Data[j]=Data[j+1];
    curLen-=1;
    return true;
}
//寻找表中与x相同的项并返回其序号
int SeqList<T>::Search(T&x)
{
    //sequence number
    for(int i=0;i<curLen;i++)
        if(Data[i]==x)
        return i;
    return 0;
}
//定位表中第i个表项的位置，返回其位置的序号
int SeqList<T>Locate(int i)
{
    if(i>=1&&i<=curLen)
        return i-1;
}
//从标准输入获取数据
void SeqLise<T>::Input()
{
    cout<<"please enter curLen:";
    cin>>curLen;
    for(int i=0;i<curLen;i++)
        cin>>Data[i];
}
//输出到屏幕上
void SeqList<T>::Output()
{
    cout<<"---你的顺序表---"<<endl;
    for(int i=0;i<curLen;i++)
        cout<<"#"<<i+1<<":"<<Data[i]<<endl;
}
